[{
  
  "id": "rvmwmpbja9g",
  "author": "Andrey Boldak",
  "public": true,
  "data": "\n# NEW ADE REPORT (YAML NOTATION)\n\n- query:\n    - from: messages\n    - custom:\n        # - $group:\n        #     _id: $schedule.name\n        #     count:\n        #         $count: {}\n        - $project:\n            _id: 0\n            source: $schedule.name\n            scrapedAt: $scraper.scrapedAt\n            # messages: $count\n    - out: groups        \n\n- query:\n    - from: groups\n\n    - dateTrunc:\n        label: scrapedAt\n        unit: minute\n        binSize: 1\n        \n    - out: scrapedTimeline \n\n- aggregate:\n\n\n    - histogram:\n        from: groups\n        label: source\n        transform: > \n            (value, context) => value.source\n        into: gr\n\n    # - set:\n    #     from: scrapedTimeline\n        \n    #     transform: >\n    #         value => value\n        \n    #     into: t\n        \n    - timeline:\n        from: scrapedTimeline\n        date: scrapedAt\n        groupBy: source\n        into: t \n        unit: minute\n        binSize: 1\n        cumulative: true\n        # transform: >\n        #     value => value[0].data.map( d => ({\n        #       Hour: moment(d.date).format(\"HH:mm\"),\n        #       messages: d.value\n        #     }))         \n\n    \n    - value:\n        into: wdOptions\n        transform: >\n            () => ({\n                tooltip: {\n                    show:true\n                },\n                \n                \"series\": [\n                    {\n                        \"name\": \"Google Trends\",\n                        \"type\": \"wordCloud\",\n                        \"left\": \"center\",\n                        \"top\": \"center\",\n                        \"width\": \"100%\",\n                        \"height\": \"100%\",\n                        \"right\": null,\n                        \"bottom\": null,\n                        \"rotationRange\": [\n                            0,\n                            0\n                        ],\n                        \"rotationStep\": 0,\n                        drawOutOfBound: true,\n                        \"textPadding\": 10,\n                        \"data\": [\n                            {\n                                \"name\": \"ECHARTS WORDCLOUD\",\n                                \"value\": 10000,\n                                \"itemStyle\": {\n                                    \"normal\": {\n                                        \"color\": \"black\"\n                                    }\n                                }\n                            },\n                            {\n                                \"name\": \"Macys\",\n                                \"value\": 6181\n                            },\n                            {\n                                \"name\": \"Amy Schumer\",\n                                \"value\": 4386\n                            },\n                            {\n                                \"name\": \"Jurassic World\",\n                                \"value\": 4055\n                            },\n                            {\n                                \"name\": \"Charter Communications\",\n                                \"value\": 2467\n                            },\n                            {\n                                \"name\": \"Chick Fil A\",\n                                \"value\": 2244\n                            },\n                            {\n                                \"name\": \"Planet Fitness\",\n                                \"value\": 1898\n                            },\n                            {\n                                \"name\": \"Pitch Perfect\",\n                                \"value\": 1484\n                            },\n                            {\n                                \"name\": \"Express\",\n                                \"value\": 1112\n                            },\n                            {\n                                \"name\": \"Home\",\n                                \"value\": 965\n                            },\n                            {\n                                \"name\": \"Johnny Depp\",\n                                \"value\": 847\n                            },\n                            {\n                                \"name\": \"Lena Dunham\",\n                                \"value\": 582\n                            },\n                            {\n                                \"name\": \"Lewis Hamilton\",\n                                \"value\": 555\n                            },\n                            {\n                                \"name\": \"KXAN\",\n                                \"value\": 550\n                            },\n                            {\n                                \"name\": \"Mary Ellen Mark\",\n                                \"value\": 462\n                            },\n                            {\n                                \"name\": \"Farrah Abraham\",\n                                \"value\": 366\n                            },\n                            {\n                                \"name\": \"Rita Ora\",\n                                \"value\": 360\n                            },\n                            {\n                                \"name\": \"Serena Williams\",\n                                \"value\": 282\n                            },\n                            {\n                                \"name\": \"NCAA baseball tournament\",\n                                \"value\": 273\n                            },\n                            {\n                                \"name\": \"Point Break\",\n                                \"value\": 265\n                            }\n                        ]\n                    }\n                ]\n                \n            })\n    \n    \n    - value:\n        into: chartOptions\n        transform: >\n            () => ({\n              title: {\n                text: 'Basic Radar Chart'\n              },\n              legend: {\n                data: ['Allocated Budget', 'Actual Spending']\n              },\n              radar: {\n                // shape: 'circle',\n                indicator: [\n                  { name: 'Sales', max: 6500 },\n                  { name: 'Administration', max: 16000 },\n                  { name: 'Information Technology', max: 30000 },\n                  { name: 'Customer Support', max: 38000 },\n                  { name: 'Development', max: 52000 },\n                  { name: 'Marketing', max: 25000 }\n                ]\n              },\n              series: [\n                {\n                  name: 'Budget vs spending',\n                  type: 'radar',\n                  data: [\n                    {\n                      value: [4200, 3000, 20000, 35000, 50000, 18000],\n                      name: 'Allocated Budget'\n                    },\n                    {\n                      value: [5000, 14000, 28000, 26000, 42000, 21000],\n                      name: 'Actual Spending'\n                    }\n                  ]\n                }\n              ]\n            })\n        \n# - log:\n#     eval: context => JSON.stringify(context.t, null, \" \")\n    \n\n- publish:\n\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 9  \n                  widgets:\n                    \n                    - markdown:\n                        content: >\n                            <div class=\"d-flex align-center pb-1\" style=\"border-bottom: 1px solid #27752a\">\n                                <img src=\"./img/icons/molfar.png\" style=\"width:36px\"> \n                                <div class=\"subtitle-2 success--text px-2 pt-1\" style=\"line-height:0.8\">\n                                    @molfar\n                                    <br/> \n                                    <span class=\"caption font-weight-light\">Data Intelligence</span>\n                                </div>\n                            </div>    \n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 6\n                  widgets:\n                    \n                    - markdown:\n                        content: '###All Sources'                \n                    \n                    - custom-chart:\n                        from: wdOptions\n                        height: 350\n\n    \n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 6\n                  widgets:\n                    \n                    - markdown:\n                        content: '###All Sources'                \n                    \n                    - custom-chart:\n                        from: chartOptions\n                        height: 350\n                        \n                    - custom-chart:\n                        height: 250\n                        options:\n                            title: \n                                - text: Radial Polar Bar Label Position (middle)\n                            polar: \n                                radius: \n                                    - 30 \n                                    - 80%\n                            radiusAxis: \n                                max: 4\n                             \n                            angleAxis: \n                                type: category\n                                data: \n                                    - a \n                                    - b \n                                    - c \n                                    - d\n                                startAngle: 75\n                            series: \n                                type: 'bar'\n                                data: \n                                    - 2 \n                                    - 1.2 \n                                    - 2.4 \n                                    - 3.6\n                                coordinateSystem: polar\n                                label: \n                                  show: true\n                                  position: middle\n                                  formatter: '{b}: {c}'\n                            animation: false\n                    \n                    - pie-chart:\n                        \n                        from: gr\n                        \n                        asCategory: value\n                        asValue: count\n                        \n                        # legend:\n                        #     - name: Assign 2nd expert\n                        #       color: '#9e9e9e'\n                        #     - name: Assign 1st expert\n                        #       color: \"#a1887f\"\n                        #     - name: Continue Labeling\n                        #       color: \"#e6ab02\" \n                        #     - name: Resolve 1st Stage Rejection\n                        #       color: \"#ff5722\" \n                        #     - name: Complete 2nd Stage\n                        #       color: \"#66a61e\"\n                        #     - name: Resolve 2nd Stage Rejection\n                        #       color: \"#d32f2f\"\n                        #     - name: Complete Labeling\n                        #       color: \"#1e88e5\"    \n                        #     - name: Finalized\n                        #       color: \"#7570b3\"\n                        \n                        height: 320\n                        radius:\n                            - 40%\n                            - 55%\n\n                    - time-chart:\n                        from: t\n                        asSerieName: id\n                        asSerieData: data\n                        \n                        # legend:\n                        #     - name: Assign 2nd expert\n                        #       color: '#9e9e9e'\n                        #     - name: Assign 1st expert\n                        #       color: \"#a1887f\"\n                        #     - name: Continue Labeling\n                        #       color: \"#e6ab02\" \n                        #     - name: Resolve 1st Stage Rejection\n                        #       color: \"#ff5722\" \n                        #     - name: Complete 2nd Stage\n                        #       color: \"#66a61e\"\n                        #     - name: Resolve 2nd Stage Rejection\n                        #       color: \"#d32f2f\"\n                        #     - name: Complete Labeling\n                        #       color: \"#1e88e5\"    \n                        #     - name: Finalized\n                        #       color: \"#7570b3\"\n                        \n                        stacked: true\n                        areaStyle:\n                            opacity: 0.15\n                        lineStyle:\n                            width: 1.75\n                        smooth: true    \n                        height: 400\n                        \n                    - table:\n                        from: gr\n                        header:\n                            items:\n                                - value\n                                - count\n                            decoration:\n                                class: primary lighten-4 white--text subtitle-2",
  "name": "test",
  "expiration": {
    "size": -1
  },
  "updatedAt": "2023-09-08T16:37:01.545Z",
  "cachedAt": {
    "$date": "2023-10-23T08:37:24.464Z"
  }
},{
  "id": "bafb7fkb1n",
  "author": "Andrey Boldak",
  "public": true,
  "data": "\n# NEW ADE REPORT (YAML NOTATION)\n- context:\n    value:\n        into: reportId\n        transform: ( value, ctx ) => ctx.$request.id || ctx.$request.reportId\n\n- query:\n    - from: messages\n    - custom:\n        - $unwind:\n            path: $ner\n        - $project:\n            source: $schedule.name\n            sentiment: $sentiments.emotion\n            tag: $ner.tag\n            entity: $ner.entity\n            text: $scraper.message.text\n            md5: $scraper.message.md5\n        - $group:\n            _id: $md5  \n            entities: \n                $push: $entity\n            text:\n                $addToSet: $text\n            source:\n                $addToSet: $source\n        - $project:\n            _id: 0\n            entities: $entities\n            source:\n  \t            $arrayElemAt:\n                    - $source\n                    - 0\n            text: \n  \t            $arrayElemAt:\n                    - $text\n                    - 0\n    - out: entities\n\n- query:\n    - from: messages\n    - custom:\n        - $project:\n            _id: 0\n            source: $schedule.name\n            all: all sources\n            sentiments: $sentiments.emotion\n            language: $langDetector.language.locale\n            scrapedAt: $scraper.scrapedAt\n    - out: groups        \n\n- query:\n    - from: groups\n    - dateTrunc:\n        label: scrapedAt\n        unit: hour\n        binSize: 2\n    - out: scrapedTimeline \n\n- query:\n    - from: messages\n    - custom:\n        - $group:\n            _id:\n                language: $langDetector.language.locale\n                sentiment: $sentiments.emotion\n            count:\n                $count: {}\n        - $project:\n            _id: 0\n            language: $_id.language\n            sentiment: $_id.sentiment\n            count: $count\n    - out: lang_sent        \n\n- query:\n    - from: messages\n    - custom:\n        - $group:\n            _id:\n                source: $schedule.name\n                sentiment: $sentiments.emotion\n            count:\n                $count: {}\n        - $project:\n            _id: 0\n            source: $_id.source\n            sentiment: $_id.sentiment\n            count: $count\n    - out: src_sent     \n\n\n- aggregate:\n\n\n    - histogram:\n        from: groups\n        label: source\n        transform: > \n            (value, context) => value.source\n        into: gr\n\n    - histogram:\n        from: groups\n        label: language\n        transform: > \n            (value, context) => value.language\n        into: lang\n    \n    - histogram:\n        from: groups\n        label: sentiments\n        transform: > \n            (value, context) => value.sentiments\n        into: sent\n\n       \n    - timeline:\n        from: scrapedTimeline\n        date: scrapedAt\n        groupBy: all\n        into: t \n        unit: minute\n        binSize: 1\n        cumulative: false\n\n    - value:\n        into: currentDate\n        transform: () => moment().format(\"MMM DD, YYYY HH:mm:ss\")\n\n    - set:\n        from: entities\n        into: ne\n        transform: > \n            value => {\n                return value.map( (v, i) => ({\n                    \"No.\": i+1,\n                    \"Source\": v.source,\n                    \"Entities\": { html: `<div class=\"subtitle-2 py-1\" style=\"line-height:1\">${_.uniqBy(v.entities).join(\", \")}</div>`},\n                    \"Message\": { html: `<div class=\"caption py-1\" style=\"line-height:1\">${v.text}</div>`}\n                }))\n            }\n        \n    \n    - set:\n        from: lang_sent\n        into: ls_heatmap\n        transform: >\n            value => {\n                const langs = [\"uk\",\"en\", \"ru\"]\n                const sents = [\"positive\", \"negative\", \"unrecognised\"]\n                \n                const counts = langs.map( l => value.filter(v => v.language == l).map(v => v.count).reduce((a,v)=> a+v, 0))\n                \n                let data = []\n                \n                langs.forEach( (l, li) => {\n                    \n                    sents.forEach( (s, si) => {\n                        let f = find(value, v => v.sentiment == s && v.language == l)\n                        if(f){\n                            data.push([li,si,(f.count) ? Number.parseFloat((f.count/counts[li]).toFixed(2)) : \"-\"])\n                        } else {\n                            data.push([li,si,\"-\"])\n                        }\n                    })\n                    \n                })\n                \n                return {\n                  tooltip: {\n                    position: 'top'\n                  },\n                  grid: {\n                    height: '50%',\n                    top: '10%',\n                    left: \"20%\"\n                  },\n                  xAxis: {\n                    type: 'category',\n                    data: langs,\n                    splitArea: {\n                      show: true\n                    }\n                  },\n                  yAxis: {\n                    type: 'category',\n                    data: sents,\n                    splitArea: {\n                      show: true\n                    }\n                  },\n                  visualMap: {\n                    min: 0,\n                    max: 1,\n                    calculable: true,\n                    orient: 'horizontal',\n                    left: 'center',\n                    bottom: '5%'\n                  },\n                  series: [\n                    {\n                      name: 'Languages vs. Sentiments',\n                      type: 'heatmap',\n                      data: data,\n                      label: {\n                        show: true\n                      },\n                      emphasis: {\n                        itemStyle: {\n                          shadowBlur: 10,\n                          shadowColor: 'rgba(0, 0, 0, 0.5)'\n                        }\n                      }\n                    }\n                  ]\n                }\n                \n            }\n\n    - set:\n        from: src_sent\n        into: ss_heatmap\n        transform: >\n            value => {\n                const sources = uniqBy(value.map( v => v.source))\n                const sents = [\"positive\", \"negative\", \"unrecognised\"]\n                const counts = sources.map( l => value.filter(v => v.source == l).map(v => v.count).reduce((a,v)=> a+v, 0))\n                \n                let data = []\n                \n                sources.forEach( (sr, sri) => {\n                    \n                    sents.forEach( (s, si) => {\n                        let f = find(value, v => v.sentiment == s && v.source == sr)\n                        if(f){\n                            data.push([sri, si, (f.count) ? Number.parseFloat((f.count/counts[sri]).toFixed(2)) : \"-\"])\n                        } else {\n                            data.push([sri, si, \"-\"])\n                        }\n                    })\n                    \n                })\n                \n                return {\n                  tooltip: {\n                    position: 'top'\n                  },\n                  grid: {\n                    height: '50%',\n                    top: '10%',\n                    left: \"20%\"\n                  },\n                  xAxis: {\n                    type: 'category',\n                    data: sources,\n                    splitArea: {\n                      show: true\n                    }\n                  },\n                  yAxis: {\n                    type: 'category',\n                    data: sents,\n                    splitArea: {\n                      show: true\n                    }\n                  },\n                  visualMap: {\n                    min: 0,\n                    max: 1,\n                    calculable: true,\n                    orient: 'horizontal',\n                    left: 'center',\n                    bottom: '5%'\n                  },\n                  series: [\n                    {\n                      name: 'Suorces vs. Sentiments',\n                      type: 'heatmap',\n                      data: data,\n                      label: {\n                        show: true\n                      },\n                      emphasis: {\n                        itemStyle: {\n                          shadowBlur: 10,\n                          shadowColor: 'rgba(0, 0, 0, 0.5)'\n                        }\n                      }\n                    }\n                  ]\n                }\n                \n            }\n    \n    - value:\n        into: title\n        transform: () => '###Sentiments vs. Sources'\n# - log:\n#     eval: context => JSON.stringify(context.t, null, \" \")\n    \n\n- publish:\n\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 9  \n                  widgets:\n                    \n                    - markdown:\n                        content: >\n                            <div class=\"d-flex align-center pb-1\" style=\"border-bottom: 1px solid #27752a\">\n                                <img src=\"./img/icons/molfar.png\" style=\"width:36px\"> \n                                <div class=\"subtitle-2 success--text px-2 pt-1\" style=\"line-height:0.8\">\n                                    @molfar\n                                    <br/> \n                                    <span class=\"caption font-weight-light\">Data Intelligence</span>\n                                </div>\n                                <div class=\"spacer\"></div>\n                                <div class=\"subtitle-2 success--text\"># ${reportId}</div>\n                            </div>\n                            \n                            \n                            # Monitoring Report\n                            \n                            \n                            Reported at ***${currentDate}***\n                            \n                            \n                            Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit amet orci eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis magna. Sed consequat, leo eget bibendum sodales, augue velit cursus nunc,\n                            \n                            \n                            ## Summary\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 4\n                  widgets:\n                    \n                    - markdown:\n                        content: '###Messages'                \n                    \n                    - pie-chart:\n                        from: gr\n                        asCategory: value\n                        asValue: count\n                        height: 320\n                        radius:\n                            - 40%\n                            - 55%\n\n                    - markdown:\n                        content: '###Sources'                \n                    \n                    - table:\n                        from: gr\n                        header:\n                            items:\n                                - value\n                                - count\n                            decoration:\n                                class: primary--text subtitle-2        \n                    \n              - column:\n                  width: 5\n                  widgets:\n                    \n                    - markdown:\n                        content: '###Timeline'                \n                    \n                    - time-chart:\n                        from: t\n                        asSerieName: id\n                        asSerieData: data\n                        stacked: false\n                        areaStyle:\n                            opacity: 0.15\n                        lineStyle:\n                            width: 1.75\n                        smooth: true    \n                        height: 400\n\n\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 9  \n                  widgets:\n                    \n                    - markdown:\n                        content: >\n                            ## Content Analisys\n \n                            \n\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 6  \n                  widgets:\n                    - markdown:\n                        content: >\n                            ### Named Entities\n\n                    - table:\n                        from: ne\n                        header:\n                            items:\n                                - No.\n                                - Source\n                                - Entities\n                                - Message\n                            decoration:\n                                class: primary--text subtitle-2        \n\n                            \n              - column:\n                  width: 3\n                  widgets:\n                    \n                    - markdown:\n                        content: '###Languages'                \n                    \n                    - pie-chart:\n                        from: lang\n                        asCategory: value\n                        asValue: count\n                        height: 320\n                        radius:\n                            - 40%\n                            - 55%\n\n                    - markdown:\n                        content: '###Sentiments'                \n\n                    - pie-chart:\n                        from: sent\n                        asCategory: value\n                        asValue: count\n                        height: 320\n                        radius:\n                            - 40%\n                            - 55%\n                   \n                    - markdown:\n                        content: '###Sentiments vs. Languages'                \n\n                    - custom-chart:\n                        from: ls_heatmap\n                        height: 380\n\n                    - markdown:\n                        content:\n                            $: title\n                        # '###Sentiments vs. Sources'                \n\n                    - custom-chart:\n                        from: ss_heatmap\n                        height: 380\n                        ",
  "name": "@molfar Pipeline Monitoring",
  "expiration": {
    "size": -1
  },
  "updatedAt": "2023-09-10T17:25:21.936Z",
  "cachedAt": {
    "$date": "2023-09-22T08:01:58.693Z"
  }
},{
  "id": "wpcmg4flijc",
  "public": true,
  "data": "\n# NEW @molfar REPORT (YAML NOTATION)\n\n- context:\n    - value:\n        into: r\n        transform: (value, context) => JSON.stringify(context.$request, null, \" \")\n\n- log:\n    eval: ctx => JSON.stringify(ctx, null, \" \")\n        \n- publish:\n    - section:\n        align: justify-center\n        columns:\n          - column:\n              width: 9  \n              widgets:\n                \n                - markdown:\n                    content: >\n                        <pre>\n                            ${r}\n                        </pre>\n        ",
  "name": "test request",
  "expiration": {
    "size": -1
  },
  "updatedAt": "2023-09-10T19:01:49.553Z",
  "cachedAt": {
    "$date": "2023-09-10T19:02:03.449Z"
  }
},{
  "id": "ag91omb0lsk",
  "author": "Andrey Boldak",
  "public": true,
  "data": "\n#######################################################################################################\n\n- context:\n    \n    - import:\n        from: nlp/highlight\n        as: highlight\n        \n    - value:\n        into: reportId\n        transform: ( value, ctx ) => ctx.$request.id || ctx.$request.reportId\n    - value:\n        into: sourceFilter\n        transform: ( value, ctx ) => ctx.$request.sourceRegex || ''\n\n    - value:\n        into: timelineUnit\n        transform: ( value, ctx ) => ctx.$request.unit || 'minute'\n\n    - value:\n        into: timelineBin\n        transform: >\n            ( value, ctx ) => (ctx.$request.bin) ? _.isNaN(Number.parseInt(ctx.$request.bin)) ? 1 : Number.parseInt(ctx.$request.bin) : 1\n\n    - value:\n        into: timelineCumulate\n        transform: ( value, ctx ) => ctx.$request.cumulate || false\n\n    - value:\n        into: startDate\n        transform: ( value, ctx ) => ctx.$request.startDate || new Date(\"2020-01-01\").toISOString()\n\n\n    - value:\n        into: endDate\n        transform: ( value, ctx ) => ctx.$request.endDate || new Date().toISOString()\n\n    # - log:\n    #     eval: ctx => ctx.startDate+ \" - \"+ctx.endDate \n#######################################################################################################\n\n- query:\n    - from: messages\n\n    - custom:\n        - $match:\n            \"schedule.name\":\n                $regex:\n                    $: sourceFilter\n        - $addFields:\n            scrapedAt: \n                $cond:\n                  - $ifNull:\n                        - \"$scraper.scrapedAt\"\n                        - false \n                  - \"$scraper.scrapedAt\" \n                  - \"$scrapedAt\"\n        \n        - $match:\n            scrapedAt:\n                $gte: \n                    $: startDate\n        - $match:\n            scrapedAt:\n                $lte: \n                    $: endDate\n\n        - $sort:\n            scrapedAt: -1\n        \n        - $limit: 50\n\n    - into: entities    \n\n- query:\n    - from: messages\n    - custom:\n        - $match:\n            \"schedule.name\":\n                $regex:\n                    $: sourceFilter\n                    \n        - $addFields:\n            scrapedAt: \n                $cond:\n                  - $ifNull:\n                        - \"$scraper.scrapedAt\"\n                        - false \n                  - \"$scraper.scrapedAt\" \n                  - \"$scrapedAt\"\n        \n        - $match:\n            scrapedAt:\n                $gte: \n                    $: startDate\n        - $match:\n            scrapedAt:\n                $lte: \n                    $: endDate\n                    \n            \n        - $project:\n            _id: 0\n            source: $schedule.name\n            all: all sources\n            sentiments: $sentiments.emotion\n            language: $langDetector.language.locale\n            scrapedAt: $scrapedAt\n    - dateTrunc:\n        label: scrapedAt\n        unit: \n            $: timelineUnit\n        binSize:\n            $: timelineBin\n    - out: scrapedTimeline \n\n- query:\n    \n    - from: messages\n    - custom:\n \n        - $match:\n            \"schedule.name\":\n                $regex:\n                    $: sourceFilter\n\n                    \n        - $addFields:\n            scrapedAt: \n                $cond:\n                  - $ifNull:\n                        - \"$scraper.scrapedAt\"\n                        - false \n                  - \"$scraper.scrapedAt\" \n                  - \"$scrapedAt\"\n\n        \n        - $match:\n            scrapedAt:\n                $gte: \n                    $: startDate\n        - $match:\n            scrapedAt:\n                $lte: \n                    $: endDate\n\n        - $group:\n            _id:\n                language: $langDetector.language.locale\n                sentiment: $sentiments.emotion\n            count:\n                $count: {}\n        - $project:\n            _id: 0\n            language: $_id.language\n            sentiment: $_id.sentiment\n            count: $count\n    - into: lang_sent        \n\n- query:\n    - from: messages\n    - custom:\n        - $match:\n            \"schedule.name\":\n                $regex:\n                    $: sourceFilter\n                    \n        - $addFields:\n            scrapedAt: \n                $cond:\n                  - $ifNull:\n                        - \"$scraper.scrapedAt\"\n                        - false \n                  - \"$scraper.scrapedAt\" \n                  - \"$scrapedAt\"\n\n        \n        - $match:\n            scrapedAt:\n                $gte: \n                    $: startDate\n        - $match:\n            scrapedAt:\n                $lte: \n                    $: endDate\n\n        - $group:\n            _id:\n                source: $schedule.name\n                sentiment: $sentiments.emotion\n            count:\n                $count: {}\n        - $project:\n            _id: 0\n            source: $_id.source\n            sentiment: $_id.sentiment\n            count: $count\n    - into: src_sent     \n\n\n- aggregate:\n\n    - histogram:\n        from: messages\n        filter:\n            - $match:\n                \"schedule.name\":\n                    $regex:\n                        $: sourceFilter\n\n            - $addFields:\n                scrapedAt: \n                    $cond:\n                      - $ifNull:\n                            - \"$scraper.scrapedAt\"\n                            - false \n                      - \"$scraper.scrapedAt\" \n                      - \"$scrapedAt\"\n    \n            \n            - $match:\n                scrapedAt:\n                    $gte: \n                        $: startDate\n            - $match:\n                scrapedAt:\n                    $lte: \n                        $: endDate\n\n            \n            - $project:\n                _id: 0\n                source: $schedule.name\n                sentiments: $sentiments.emotion\n                language: $langDetector.language.locale\n\n        label: \n            - source\n            - sentiments\n            - language\n        \n        into: stats\n    \n    - timeline:\n        from: scrapedTimeline\n        date: scrapedAt\n        groupBy: all\n        into: t \n        unit:\n            $: timelineUnit\n        binSize: \n            $: timelineBin\n        cumulative:\n            $: timelineCumulate\n\n    - value:\n        into: currentDate\n        transform: () => moment().format(\"MMM DD, YYYY HH:mm:ss\")\n\n\n    - value:\n        into: ne\n        transform: > \n            (v, ctx) => {\n                return ctx.entities.map( (v, i) => ({\n                    \"No.\": i+1,\n                    \"Source\": v.schedule.name,\n                    \"Message\": { html: `\n                    <div class=\"subtitle-2 font-weight-normal py-1\" style=\"line-height:1.4\">\n                    \n                    ${context.highlight({\n                        \n                        text: v.scraper.message.text,\n                        locale: v.langDetector.language.locale,\n                        entities: v.ner\n                        \n                    })}\n                    \n                    </div>`}\n                }))\n            }\n        \n    \n    - value:\n        into: ls_heatmap\n        transform: >\n            (v, ctx) => {\n                let value = ctx.lang_sent\n                const langs = [\"uk\",\"en\", \"ru\"]\n                const sents = [\"positive\", \"negative\", \"unrecognised\"]\n                \n                const counts = langs.map( l => value.filter(v => v.language == l).map(v => v.count).reduce((a,v)=> a+v, 0))\n                \n                let data = []\n                \n                langs.forEach( (l, li) => {\n                    \n                    sents.forEach( (s, si) => {\n                        let f = find(value, v => v.sentiment == s && v.language == l)\n                        if(f){\n                            data.push([li,si,(f.count) ? Number.parseFloat((f.count/counts[li]).toFixed(2)) : \"-\"])\n                        } else {\n                            data.push([li,si,\"-\"])\n                        }\n                    })\n                    \n                })\n                \n                return {\n                  tooltip: {\n                    position: 'top'\n                  },\n                  grid: {\n                    height: '50%',\n                    top: '10%',\n                    left: \"20%\"\n                  },\n                  xAxis: {\n                    type: 'category',\n                    data: langs,\n                    splitArea: {\n                      show: true\n                    }\n                  },\n                  yAxis: {\n                    type: 'category',\n                    data: sents,\n                    splitArea: {\n                      show: true\n                    }\n                  },\n                  visualMap: {\n                    min: 0,\n                    max: 1,\n                    calculable: true,\n                    orient: 'horizontal',\n                    left: 'center',\n                    bottom: '5%'\n                  },\n                  series: [\n                    {\n                      name: 'Languages vs. Sentiments',\n                      type: 'heatmap',\n                      data: data,\n                      label: {\n                        show: true\n                      },\n                      emphasis: {\n                        itemStyle: {\n                          shadowBlur: 10,\n                          shadowColor: 'rgba(0, 0, 0, 0.5)'\n                        }\n                      }\n                    }\n                  ]\n                }\n                \n            }\n\n    - set:\n        into: ss_heatmap\n        transform: >\n            (v, ctx) => {\n                let value = ctx.src_sent\n                const sources = uniqBy(value.map( v => v.source))\n                const sents = [\"positive\", \"negative\", \"unrecognised\"]\n                const counts = sources.map( l => value.filter(v => v.source == l).map(v => v.count).reduce((a,v)=> a+v, 0))\n                \n                let data = []\n                \n                sources.forEach( (sr, sri) => {\n                    \n                    sents.forEach( (s, si) => {\n                        let f = find(value, v => v.sentiment == s && v.source == sr)\n                        if(f){\n                            data.push([sri, si, (f.count) ? Number.parseFloat((f.count/counts[sri]).toFixed(2)) : \"-\"])\n                        } else {\n                            data.push([sri, si, \"-\"])\n                        }\n                    })\n                    \n                })\n                \n                return {\n                  tooltip: {\n                    position: 'top'\n                  },\n                  grid: {\n                    height: '50%',\n                    top: '10%',\n                    left: \"20%\"\n                  },\n                  xAxis: {\n                    type: 'category',\n                    data: sources,\n                    splitArea: {\n                      show: true\n                    }\n                  },\n                  yAxis: {\n                    type: 'category',\n                    data: sents,\n                    splitArea: {\n                      show: true\n                    }\n                  },\n                  visualMap: {\n                    min: 0,\n                    max: 1,\n                    calculable: true,\n                    orient: 'horizontal',\n                    left: 'center',\n                    bottom: '5%'\n                  },\n                  series: [\n                    {\n                      name: 'Suorces vs. Sentiments',\n                      type: 'heatmap',\n                      data: data,\n                      label: {\n                        show: true\n                      },\n                      emphasis: {\n                        itemStyle: {\n                          shadowBlur: 10,\n                          shadowColor: 'rgba(0, 0, 0, 0.5)'\n                        }\n                      }\n                    }\n                  ]\n                }\n                \n            }\n    \n    - value:\n        into: title\n        transform: () => '###Sentiments vs. Sources'\n# - log:\n#     eval: context => JSON.stringify(context.series, null, \" \")\n    \n\n- publish:\n\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 12  \n                  widgets:\n                    \n                    - markdown:\n                        content: >\n                            <div class=\"d-flex align-center pb-1\" style=\"border-bottom: 1px solid #27752a\">\n                                <img src=\"./img/icons/molfar.png\" style=\"width:36px\"> \n                                <div class=\"subtitle-2 success--text px-2 pt-1\" style=\"line-height:0.8\">\n                                    @molfar\n                                    <br/> \n                                    <span class=\"caption font-weight-light\">Data Intelligence</span>\n                                </div>\n                                <div class=\"spacer\"></div>\n                                <div class=\"subtitle-2 success--text\"># ${reportId}</div>\n                            </div>\n                            \n                            \n                            # Monitoring Report\n                            \n                            \n                            Reported at ***${currentDate}***\n\n                            \n                            ## Summary\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 5\n                  widgets:\n                    \n                    - markdown:\n                        content: '###Messages'                \n                    \n                    - pie-chart:\n                        from: stats.source\n                        asCategory: value\n                        asValue: count\n                        height: 320\n                        radius:\n                            - 40%\n                            - 55%\n\n                    - markdown:\n                        content: '###Sources'                \n                    \n                    - table:\n                        from: stats.source\n                        header:\n                            items:\n                                - value\n                                - count\n                            decoration:\n                                class: primary--text subtitle-2        \n                    \n              - column:\n                  width: 7\n                  widgets:\n                    \n                    - markdown:\n                        content: '###Timeline'                \n                    \n                    - time-chart:\n                        from: t\n                        asSerieName: id\n                        asSerieData: data\n                        stacked: false\n                        areaStyle:\n                            opacity: 0.1\n                        lineStyle:\n                            width: 1.5\n                        smooth: false    \n                        height: 400\n\n\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 12  \n                  widgets:\n                    \n                    - markdown:\n                        content: >\n                            ## Content Analisys\n \n                            \n\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 8  \n                  widgets:\n                    - markdown:\n                        content: >\n                            ### Named Entities ( latest 50 messages )\n                            \n                            <style>\n                                \n                                span.entity-tag-LOCATION {\n                                    background: #FFF59D;\n                                    border: 1px solid #D84315;\n                                    padding: 0 5px;\n                                    color: #D84315;\n                                    font-weight: bold;\n                                                margin: 0 3px;\n\n                                }\n                                \n                                span.entity-tag-LOC {\n                                    background: #FFF59D;\n                                    border: 1px solid #D84315;\n                                    padding: 0 5px;\n                                    color: #D84315;\n                                    font-weight: bold;\n                                                margin: 0 3px;\n\n                                }\n                                \n                                span.entity-tag-PERSON {\n                                        background: #E6EE9C;\n                                        border: 1px solid #00796B;\n                                        padding: 0 5px;\n                                        color: #00796B;\n                                        font-weight: bold;\n                                                margin: 0 3px;\n\n                                }\n                                \n                                span.entity-tag-PERS {\n                                        background: #E6EE9C;\n                                        border: 1px solid #00796B;\n                                        padding: 0 5px;\n                                        color: #00796B;\n                                        font-weight: bold;\n                                                margin: 0 3px;\n\n                                }\n                                \n                                span.entity-tag-ORGANIZATION {\n                                            background: #FFEBEE;\n                                            border: 1px solid #B71C1C;\n                                            padding: 0 5px;\n                                            color: #B71C1C;\n                                            font-weight: bold;\n                                                margin: 0 3px;\n\n                                }\n                                \n                                span.entity-tag-ORG {\n                                            background: #FFEBEE;\n                                            border: 1px solid #B71C1C;\n                                            padding: 0 5px;\n                                            color: #B71C1C;\n                                            font-weight: bold;\n                                                margin: 0 3px;\n\n                                }\n                                \n                                span.entity-tag-MISC {\n                                                background: #ECEFF1;\n                                                border: 1px solid #263238;\n                                                padding: 0 5px;\n                                                color: #263238;\n                                                font-weight: bold;\n                                                margin: 0 3px;\n                                }\n                                \n                                \n                            </style>\n\n                    - table:\n                        from: ne\n                        header:\n                            items:\n                                - No.\n                                - Source\n                                # - Entities\n                                - Message\n                            decoration:\n                                class: primary--text subtitle-2        \n\n                            \n              - column:\n                  width: 4\n                  widgets:\n                    \n                    - markdown:\n                        content: '###Languages'                \n                    \n                    - pie-chart:\n                        from: stats.language\n                        asCategory: value\n                        asValue: count\n                        height: 320\n                        radius:\n                            - 40%\n                            - 55%\n\n                    - markdown:\n                        content: '###Sentiments'                \n\n                    - pie-chart:\n                        from: stats.sentiments\n                        asCategory: value\n                        asValue: count\n                        height: 320\n                        radius:\n                            - 40%\n                            - 55%\n                   \n                    - markdown:\n                        content: '###Sentiments vs. Languages'                \n\n                    - custom-chart:\n                        from: ls_heatmap\n                        height: 380\n\n                    - markdown:\n                        content:\n                            $: title\n                        # '###Sentiments vs. Sources'                \n\n                    - custom-chart:\n                        from: ss_heatmap\n                        height: 380\n                        ",
  "name": "Source Monitoring",
  "expiration": {
    "size": -1
  },
  "updatedAt": "2023-11-02T19:15:18.626Z",
  "cachedAt": {
    "$date": "2023-11-10T07:58:43.114Z"
  }
},{
  "id": "72mvkn0myh",
  "author": "Andrey Boldak",
  "public": true,
  "data": "\n# NEW ADE REPORT (YAML NOTATION)\n- context:\n    \n    - import:\n        from: nlp/highlight\n        as: highlight\n        \n    - value:\n        into: reportId\n        transform: ( value, ctx ) => ctx.$request.id || ctx.$request.reportId\n    \n    - value:\n        into: sourceFilter\n        transform: ( value, ctx ) => ctx.$request.sourceRegex || ''\n\n \n    - value:\n        into: currentDate\n        transform: ( value, ctx ) => moment(new Date()).format(\"MMM DD, YYYY HH:mm:ss\")\n\n    - value:\n        into: startDate\n        transform: ( value, ctx ) => ctx.$request.startDate || new Date(\"2020-01-01\").toISOString()\n\n\n    - value:\n        into: endDate\n        transform: ( value, ctx ) => ctx.$request.endDate || new Date().toISOString()\n\n    - log:\n        eval: ctx => ctx.startDate+ \" - \"+ctx.endDate \n    \n\n- query:\n    - from: messages\n\n    - custom:\n        - $match:\n            \"schedule.name\":\n                $regex:\n                    $: sourceFilter\n                    \n        - $addFields:\n            scrapedAt: \n                $cond:\n                  - $ifNull:\n                        - \"$scraper.scrapedAt\"\n                        - false \n                  - \"$scraper.scrapedAt\" \n                  - \"$scrapedAt\"\n        \n        - $match:\n            scrapedAt:\n                $gte: \n                    $: startDate\n        - $match:\n            scrapedAt:\n                $lte: \n                    $: endDate\n                    \n        - $sort:\n            \"scraper.scrapedAt\": -1\n        - $limit: 50\n        - $project:\n            _id: 0\n            message: \"$scraper.message.text\"\n            source: \"$schedule.name\"\n            date: \"$scraper.scrapedAt\"\n            scrapedAt: \"$scrapedAt\"\n\n    - into: msgs    \n\n\n- aggregate:\n    \n    # - log:\n    #     eval: ctx => JSON.stringify(ctx.msgs, null, \" \")\n    \n    - value:\n        into: msgsTable\n        transform: > \n            (v, ctx) => {\n                    return ctx.msgs.map( (v, i) => ({\n                        \"No.\": i+1,\n                        \"Date\": { html :`<div style=\"line-height:0.9\">${moment(v.date || v.scrapedAt).format(\"MMM DD, YYYY HH:mm:ss\")}`},\n                        \"Source\": v.source,\n                        \"Message\": {\n                            html: `\n                                <div class=\"subtitle-2 font-weight-normal py-1\" style=\"line-height:1.4\">\n                                    ${v.message}\n                                </div>\n                            `\n                        }\n                    }))\n                }\n\n    - log:\n        eval: ctx => JSON.stringify(ctx.msgsTable, null, \" \")\n\n- publish:\n\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 9  \n                  widgets:\n                    \n                    - markdown:\n                        content: >\n                            <div class=\"d-flex align-center pb-1\" style=\"border-bottom: 1px solid #27752a\">\n                                <img src=\"./img/icons/molfar.png\" style=\"width:36px\"> \n                                <div class=\"subtitle-2 success--text px-2 pt-1\" style=\"line-height:0.8\">\n                                    @molfar\n                                    <br/> \n                                    <span class=\"caption font-weight-light\">Data Intelligence</span>\n                                </div>\n                                <div class=\"spacer\"></div>\n                                <div class=\"subtitle-2 success--text\"># ${reportId}</div>\n                            </div>\n                            \n                            \n                            # Last 50 Processed Messages\n                            \n                            Reported at ***${currentDate}***\n                            \n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 9\n                  widgets:\n                    \n                    - table:\n                        from: msgsTable\n                        header:\n                            items:\n                                - No.\n                                - Date\n                                - Source\n                                - Message\n                            decoration:\n                                class: primary--text subtitle-2        \n\n                            \n",
  "name": "LAST 50 PROCESSED MESSAGES",
  "expiration": {
    "size": -1
  },
  "updatedAt": "2023-10-29T18:12:04.668Z",
  "cachedAt": {
    "$date": "2023-11-09T18:51:10.520Z"
  }
},{
  "id": "7f33l1svbn3",
  "author": "Andrey Boldak",
  "public": true,
  "data": "\n# NEW ADE REPORT (YAML NOTATION)\n- context:\n    \n    - import:\n        from: nlp/highlight\n        as: highlight\n        \n    - value:\n        into: reportId\n        transform: ( value, ctx ) => ctx.$request.id || ctx.$request.reportId\n    \n    - value:\n        into: sourceFilter\n        transform: ( value, ctx ) => ctx.$request.sourceRegex || ''\n\n    - value:\n        into: currentDate\n        transform: ( value, ctx ) => moment(new Date()).format(\"MMM DD, YYYY HH:mm:ss\")\n\n    - value:\n        into: startDate\n        transform: ( value, ctx ) => ctx.$request.startDate || new Date(\"2020-01-01\").toISOString()\n\n\n    - value:\n        into: endDate\n        transform: ( value, ctx ) => ctx.$request.endDate || new Date().toISOString()\n\n    - log:\n        eval: ctx => ctx.startDate+ \" - \"+ctx.endDate \n    \n\n    \n\n- query:\n    - from: messages\n\n    - custom:\n        - $match:\n            \"schedule.name\":\n                $regex:\n                    $: sourceFilter\n\n        - $addFields:\n            scrapedAt: \n                $cond:\n                  - $ifNull:\n                        - \"$scraper.scrapedAt\"\n                        - false \n                  - \"$scraper.scrapedAt\" \n                  - \"$scrapedAt\"\n        \n        - $match:\n            scrapedAt:\n                $gte: \n                    $: startDate\n        - $match:\n            scrapedAt:\n                $lte: \n                    $: endDate\n\n        - $sort:\n            \"scraper.scrapedAt\": -1\n        \n        - $group:\n            _id: \"$schedule.name\"\n            count: \n              $count: {}\n            scrapedAt: \n              $first: \"$scrapedAt\"\n            date: \n              $first: \"$scraper.scrapedAt\"\n        \n        - $addFields:\n            source: $_id\n        \n        - $sort:\n            \"scrapedAt\": -1\n\n    - into: src    \n\n- query:\n    - from: messages\n    - custom:\n\n        - $match:\n            \"schedule.name\":\n                $regex:\n                    $: sourceFilter\n\n        - $addFields:\n            scrapedAt: \n                $cond:\n                  - $ifNull:\n                        - \"$scraper.scrapedAt\"\n                        - false \n                  - \"$scraper.scrapedAt\" \n                  - \"$scrapedAt\"\n        - $match:\n            scrapedAt:\n                $gte: \n                    $: startDate\n        - $match:\n            scrapedAt:\n                $lte: \n                    $: endDate\n\n        - $set:\n            scrapedAt: \n                $toString: \n                    $dateTrunc: \n                        date: \n                            $toDate: \"$scrapedAt\"\n                        unit: \"minute\"\n                        binSize: 1\n        \n        - $group:\n            _id: \n              source: \"$schedule.name\"\n              scrapedAt: \"$scrapedAt\"\n            \n            count: \n              $count: {}\n\n        - $addFields:\n            source: \"$_id.source\"\n            date: \"$_id.scrapedAt\"\n\n        - $sort:\n           date: -1\n\n        - $limit: 50\n        \n        # - $group:\n        #     _id: \"$source\"\n        #     serie: \n        #       $push: \n        #         date: \"$date\"\n        #         count: \"$count\"\n    - into: series            \n\n\n\n\n\n\n- aggregate:\n\n    - value:\n        into: eventChart\n        transform: >\n            (v, ctx) => {\n                \n                let data = _.groupBy(ctx.series, d => d.source)\n                let times = ctx.series.map(d => moment(d.date).format(\"DD MMM, HH:mm\"))\n                times = _.uniqBy(times).reverse()\n                \n                let series = _.keys(data).map( key => {\n                    let value = data[key]\n                    return {\n                        source: key,\n                        serie: times.map( t => {\n                            let f = _.find(value, v => moment(v.date).format(\"DD MMM, HH:mm\") == t)\n                            return (f) ? f.count : 0\n                        })\n                    }\n                    \n                })\n                \n                \n                ctx.chartHeight = 40 * (series.length + 1)\n                \n                let timeAxis = times\n                \n                let title = series.map((d, idx) => ({\n                    \n                    textBaseline: 'bottom',\n                    top: ((idx + 0.5) * 100) / (series.length + 1) - 0 / (series.length+1)+ '%',\n                    text: `${d.source}`,\n                    textStyle:{\n                      fontSize: 12,\n                       fontWeight: \"normal\"\n                    }\n                    \n                }))\n                \n                let singleAxis = series.map((d, idx) => ({\n                    \n                    left: 190,\n                    type: 'category',\n                    boundaryGap: false,\n                    data: timeAxis,\n                    top: (idx * 100) / (series.length+1) + 5 + '%',\n                    height: 100 / (series.length+1) - 10 + '%',\n                    axisLabel: {\n                      interval: Math.round(times.length/10),\n                      show: idx == series.length-1\n                    },\n                    axisLine:{\n                      show:  false, \n                    },\n                    axisTick:{\n                      show: idx == data.length-1\n                    }\n                    \n                }))\n                \n                \n                series = series.map((d, idx) => ({\n                    \n                    singleAxisIndex: idx,\n                    color:\"#1565c0\",\n                    coordinateSystem: 'singleAxis',\n                    type: 'scatter',\n                    itemStyle:{\n                         opacity:0.6\n                       },\n                    data: d.serie.map( (v,i) => ({ value: [i,v], symbolSize: Math.round(Math.pow(v, 1/3)*10) })),\n                }))\n                \n                return {\n                  tooltip: {\n                    position: 'top'\n                  },\n                  title: title,\n                  singleAxis: singleAxis,\n                  series: series\n                }\n                \n            }\n\n\n    \n    - log:\n        eval: ctx => JSON.stringify(ctx.eventChart, null, \" \")\n\n    # - value:\n    #     into: charts\n    #     transform: >\n    #             (v, ctx) => {\n                    \n    #                 let value = ctx.series \n                    \n    #                 let dates = sortBy(flattenDeep( value.map( d => d.serie.map( v => v.date ))))\n    #                 let start = moment(first(dates))\n    #                 let stop = moment(last(dates))\n    #                 range = moment.range(start, stop)\n                    \n    #                 dates = Array.from(\n    #                 \trange.by(\"hour\", { step: 6})\n    #                 ).map( d => d.toDate())\n                    \n    #                 dates = dates.map( d => moment(d).format(\"DD MMM HH:mm\"))\n                    \n    #                 let series = value.map( v => {\n    #                     v.serie = dates.map( d => {\n    #                         let f = _.find(v.serie, r => moment(r.date).format(\"DD MMM HH:mm\") == d)\n    #                         return (f) ? f.count : 0\n    #                     })\n    #                     return v    \n    #                 })\n                    \n    #                 let charts = value.map( v => {\n                    \n    #                     return {\n    #                         id: v._id,\n    #                         xAxis: {\n    #                           data: dates,\n    #                           axisLabel:{\n    #                             show: true,\n    #                             fontSize: 6\n    #                           }\n    #                         },\n    #                         yAxis: {\n    #                             show:false\n    #                         },\n    #                         grid: [\n    #                             {\n    #                               top: 0,\n    #                               bottom: 0,\n    #                               left:0,\n    #                               right:0,\n    #                               height: 14\n    #                             }\n    #                         ],\n    #                         series: [\n    #                             {\n    #                                 type: 'line',\n    #                                 showSymbol: false,\n    #                                 data: v.serie,\n    #                                 areaStyle: {\n    #                                     opacity:0.05\n    #                                 },\n    #                                 step: 'middle',\n    #                             }                          \n    #                         ]\n    #                     }\n    #                 })\n                    \n    #                 return charts    \n    #             }\n\n    \n    - value:\n        into: srcTable\n        transform: > \n            (v, ctx) => {\n                    return ctx.src.map( (v, i) => ({\n                        \"No.\": i+1,\n                        \"Source\": v.source,\n                        \"Last Message Date\": { html :`<div style=\"line-height:0.9\">${moment(v.date || v.scrapedAt).format(\"MMM DD, YYYY HH:mm:ss\")}`},\n                        \"Processed Messages\": v.count,\n                        //\"Heartbeat\": {\n                        //    component:{\n                        //         \"type\": \"chart\",\n                        //         \"decoration\": {\n                        //          \"style\": \"height: 32px; margin: 5px 0\"\n                        //         },\n                        //         \"chart\": _.find(ctx.charts, ch => ch.id == v.source)\n                        //    }     \n                        //}\n                    }))\n                }\n\n\n    - value:\n        into: series\n        transform: > \n            (v, ctx) => {\n                    return ctx.series.map( (v, i) => ({\n                        \"No.\": i+1,\n                        \"Source\": v.source,\n                        \"Date\": { html :`<div style=\"line-height:0.9\">${moment(v.date || v.scrapedAt).format(\"MMM DD, YYYY HH:mm\")}`},\n                        \"Processed Messages\": v.count,\n                        //\"Heartbeat\": {\n                        //    component:{\n                        //         \"type\": \"chart\",\n                        //         \"decoration\": {\n                        //          \"style\": \"height: 32px; margin: 5px 0\"\n                        //         },\n                        //         \"chart\": _.find(ctx.charts, ch => ch.id == v.source)\n                        //    }     \n                        //}\n                    }))\n                }\n\n\n- publish:\n\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 10  \n                  widgets:\n                    \n                    - markdown:\n                        content: >\n                            <div class=\"d-flex align-center pb-1\" style=\"border-bottom: 1px solid #27752a\">\n                                <img src=\"./img/icons/molfar.png\" style=\"width:36px\"> \n                                <div class=\"subtitle-2 success--text px-2 pt-1\" style=\"line-height:0.8\">\n                                    @molfar\n                                    <br/> \n                                    <span class=\"caption font-weight-light\">Data Intelligence</span>\n                                </div>\n                                <div class=\"spacer\"></div>\n                                <div class=\"subtitle-2 success--text\"># ${reportId}</div>\n                            </div>\n                            \n                            \n                            # Source statistics\n                            \n                            Reported at ***${currentDate}***\n                            \n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 10\n                  widgets:\n                    \n                    - table:\n                        from: srcTable\n                        header:\n                            items:\n                            \n                                - \"No.\"\n                                - \"Source\"                        \n                                - \"Last Message Date\"\n                                - \"Processed Messages\"\n                                # - \"Heartbeat\"\n                                \n                            decoration:\n                                class: primary--text subtitle-2        \n                    - markdown:\n                        content: >\n                            # Latest 50 Scraper Events\n\n                    - custom-chart:\n                        from: eventChart\n                        height:\n                            $: chartHeight\n                        style: \"border: 1px solid rgb(189, 189, 189); margin: 0px 5px 10px 5px; padding: 0 10px; background:#ECEFF1;\"\n\n\n                    - table:\n                        from: series\n                        header:\n                            items:\n                                \n                                - \"No.\"\n                                - \"Source\"                        \n                                - \"Date\"\n                                - \"Processed Messages\"\n                                # - \"Heartbeat\"\n                                \n                            decoration:\n                                class: primary--text subtitle-2 \n\n \n                            \n",
  "name": "SOURCE STATISTICS",
  "expiration": {
    "size": -1
  },
  "updatedAt": "2023-11-07T09:38:06.095Z",
  "cachedAt": {
    "$date": "2023-11-10T07:57:25.516Z"
  }
},{
  "id": "f6fz28in3bc",
  "author": "Andrey Boldak",
  "public": true,
  "data": "\n#######################################################################################################\n\n- context:\n    \n    - import:\n        from: nlp/highlight\n        as: highlight\n        \n    - value:\n        into: reportId\n        transform: ( value, ctx ) => ctx.$request.id || ctx.$request.reportId\n    - value:\n        into: sourceFilter\n        transform: ( value, ctx ) => ctx.$request.sourceRegex || ''\n\n    - value:\n        into: timelineUnit\n        transform: ( value, ctx ) => ctx.$request.unit || 'minute'\n\n    - value:\n        into: timelineBin\n        transform: >\n            ( value, ctx ) => (ctx.$request.bin) ? _.isNaN(Number.parseInt(ctx.$request.bin)) ? 1 : Number.parseInt(ctx.$request.bin) : 1\n\n    - value:\n        into: timelineCumulate\n        transform: ( value, ctx ) => ctx.$request.cumulate || false\n\n#######################################################################################################\n\n- query:\n    - from: messages\n\n    - custom:\n        - $match:\n            \"schedule.name\":\n                $regex:\n                    $: sourceFilter\n        - $sample: \n            size: 50\n\n    - into: entities    \n\n- query:\n    - from: messages\n    - custom:\n        - $match:\n            \"schedule.name\":\n                $regex:\n                    $: sourceFilter\n                    \n        - $addFields:\n            scrapedAt: \n                $cond:\n                  - $ifNull:\n                        - \"$scraper.scrapedAt\"\n                        - false \n                  - \"$scraper.scrapedAt\" \n                  - \"$scrapedAt\"\n            \n        - $project:\n            _id: 0\n            source: $schedule.name\n            all: all sources\n            sentiments: $sentiments.emotion\n            language: $langDetector.language.locale\n            scrapedAt: $scrapedAt\n    - dateTrunc:\n        label: scrapedAt\n        unit: \n            $: timelineUnit\n        binSize:\n            $: timelineBin\n    - out: scrapedTimeline \n\n- query:\n    \n    - from: messages\n    - custom:\n \n        - $match:\n            \"schedule.name\":\n                $regex:\n                    $: sourceFilter\n\n                    \n        - $addFields:\n            scrapedAt: \n                $cond:\n                  - $ifNull:\n                        - \"$scraper.scrapedAt\"\n                        - false \n                  - \"$scraper.scrapedAt\" \n                  - \"$scrapedAt\"\n\n        - $group:\n            _id:\n                language: $langDetector.language.locale\n                sentiment: $sentiments.emotion\n            count:\n                $count: {}\n        - $project:\n            _id: 0\n            language: $_id.language\n            sentiment: $_id.sentiment\n            count: $count\n    - into: lang_sent        \n\n- query:\n    - from: messages\n    - custom:\n        - $match:\n            \"schedule.name\":\n                $regex:\n                    $: sourceFilter\n                    \n        - $addFields:\n            scrapedAt: \n                $cond:\n                  - $ifNull:\n                        - \"$scraper.scrapedAt\"\n                        - false \n                  - \"$scraper.scrapedAt\" \n                  - \"$scrapedAt\"\n        - $group:\n            _id:\n                source: $schedule.name\n                sentiment: $sentiments.emotion\n            count:\n                $count: {}\n        - $project:\n            _id: 0\n            source: $_id.source\n            sentiment: $_id.sentiment\n            count: $count\n    - into: src_sent     \n\n\n- aggregate:\n\n    - histogram:\n        from: messages\n        filter:\n            - $match:\n                \"schedule.name\":\n                    $regex:\n                        $: sourceFilter\n            \n            - $project:\n                _id: 0\n                source: $schedule.name\n                sentiments: $sentiments.emotion\n                language: $langDetector.language.locale\n\n        label: \n            - source\n            - sentiments\n            - language\n        \n        into: stats\n    \n    - timeline:\n        from: scrapedTimeline\n        date: scrapedAt\n        groupBy: all\n        into: t \n        unit:\n            $: timelineUnit\n        binSize: \n            $: timelineBin\n        cumulative:\n            $: timelineCumulate\n\n    - value:\n        into: currentDate\n        transform: () => moment().format(\"MMM DD, YYYY HH:mm:ss\")\n\n    - value:\n        into: ne\n        transform: > \n            (v, ctx) => {\n                return ctx.entities.map( (v, i) => ({\n                    \"No.\": i+1,\n                    \"Source\": v.schedule.name,\n                    \"Message\": { html: `\n                    <div class=\"subtitle-2 font-weight-normal py-1\" style=\"line-height:1.4\">\n                    \n                    ${context.highlight({\n                        \n                        text: v.scraper.message.text,\n                        locale: v.langDetector.language.locale,\n                        entities: v.ner\n                        \n                    })}\n                    \n                    </div>`}\n                }))\n            }\n        \n    \n    - value:\n        into: ls_heatmap\n        transform: >\n            (v, ctx) => {\n                let value = ctx.lang_sent\n                const langs = [\"uk\",\"en\", \"ru\"]\n                const sents = [\"positive\", \"negative\", \"unrecognised\"]\n                \n                const counts = langs.map( l => value.filter(v => v.language == l).map(v => v.count).reduce((a,v)=> a+v, 0))\n                \n                let data = []\n                \n                langs.forEach( (l, li) => {\n                    \n                    sents.forEach( (s, si) => {\n                        let f = find(value, v => v.sentiment == s && v.language == l)\n                        if(f){\n                            data.push([li,si,(f.count) ? Number.parseFloat((f.count/counts[li]).toFixed(2)) : \"-\"])\n                        } else {\n                            data.push([li,si,\"-\"])\n                        }\n                    })\n                    \n                })\n                \n                return {\n                  tooltip: {\n                    position: 'top'\n                  },\n                  grid: {\n                    height: '50%',\n                    top: '10%',\n                    left: \"20%\"\n                  },\n                  xAxis: {\n                    type: 'category',\n                    data: langs,\n                    splitArea: {\n                      show: true\n                    }\n                  },\n                  yAxis: {\n                    type: 'category',\n                    data: sents,\n                    splitArea: {\n                      show: true\n                    }\n                  },\n                  visualMap: {\n                    min: 0,\n                    max: 1,\n                    calculable: true,\n                    orient: 'horizontal',\n                    left: 'center',\n                    bottom: '5%'\n                  },\n                  series: [\n                    {\n                      name: 'Languages vs. Sentiments',\n                      type: 'heatmap',\n                      data: data,\n                      label: {\n                        show: true\n                      },\n                      emphasis: {\n                        itemStyle: {\n                          shadowBlur: 10,\n                          shadowColor: 'rgba(0, 0, 0, 0.5)'\n                        }\n                      }\n                    }\n                  ]\n                }\n                \n            }\n\n    - set:\n        into: ss_heatmap\n        transform: >\n            (v, ctx) => {\n                let value = ctx.src_sent\n                const sources = uniqBy(value.map( v => v.source))\n                const sents = [\"positive\", \"negative\", \"unrecognised\"]\n                const counts = sources.map( l => value.filter(v => v.source == l).map(v => v.count).reduce((a,v)=> a+v, 0))\n                \n                let data = []\n                \n                sources.forEach( (sr, sri) => {\n                    \n                    sents.forEach( (s, si) => {\n                        let f = find(value, v => v.sentiment == s && v.source == sr)\n                        if(f){\n                            data.push([sri, si, (f.count) ? Number.parseFloat((f.count/counts[sri]).toFixed(2)) : \"-\"])\n                        } else {\n                            data.push([sri, si, \"-\"])\n                        }\n                    })\n                    \n                })\n                \n                return {\n                  tooltip: {\n                    position: 'top'\n                  },\n                  grid: {\n                    height: '50%',\n                    top: '10%',\n                    left: \"20%\"\n                  },\n                  xAxis: {\n                    type: 'category',\n                    data: sources,\n                    splitArea: {\n                      show: true\n                    }\n                  },\n                  yAxis: {\n                    type: 'category',\n                    data: sents,\n                    splitArea: {\n                      show: true\n                    }\n                  },\n                  visualMap: {\n                    min: 0,\n                    max: 1,\n                    calculable: true,\n                    orient: 'horizontal',\n                    left: 'center',\n                    bottom: '5%'\n                  },\n                  series: [\n                    {\n                      name: 'Suorces vs. Sentiments',\n                      type: 'heatmap',\n                      data: data,\n                      label: {\n                        show: true\n                      },\n                      emphasis: {\n                        itemStyle: {\n                          shadowBlur: 10,\n                          shadowColor: 'rgba(0, 0, 0, 0.5)'\n                        }\n                      }\n                    }\n                  ]\n                }\n                \n            }\n    \n    - value:\n        into: title\n        transform: () => '###Sentiments vs. Sources'\n- log:\n    eval: context => JSON.stringify(context.stats, null, \" \")\n    \n\n- publish:\n\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 9  \n                  widgets:\n                    \n                    - markdown:\n                        content: >\n                            <div class=\"d-flex align-center pb-1\" style=\"border-bottom: 1px solid #27752a\">\n                                <img src=\"./img/icons/molfar.png\" style=\"width:36px\"> \n                                <div class=\"subtitle-2 success--text px-2 pt-1\" style=\"line-height:0.8\">\n                                    @molfar\n                                    <br/> \n                                    <span class=\"caption font-weight-light\">Data Intelligence</span>\n                                </div>\n                                <div class=\"spacer\"></div>\n                                <div class=\"subtitle-2 success--text\"># ${reportId}</div>\n                            </div>\n                            \n                            \n                            # Monitoring Report\n                            \n                            \n                            Reported at ***${currentDate}***\n                            \n                            \n                            Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit amet orci eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis magna. Sed consequat, leo eget bibendum sodales, augue velit cursus nunc,\n                            \n                            \n                            ## Summary\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 4\n                  widgets:\n                    \n                    - markdown:\n                        content: '###Messages'                \n                    \n                    - pie-chart:\n                        from: stats.source\n                        asCategory: value\n                        asValue: count\n                        height: 320\n                        radius:\n                            - 40%\n                            - 55%\n\n                    - markdown:\n                        content: '###Sources'                \n                    \n                    - table:\n                        from: stats.source\n                        header:\n                            items:\n                                - value\n                                - count\n                            decoration:\n                                class: primary--text subtitle-2        \n                    \n              - column:\n                  width: 5\n                  widgets:\n                    \n                    - markdown:\n                        content: '###Timeline'                \n                    \n                    - time-chart:\n                        from: t\n                        asSerieName: id\n                        asSerieData: data\n                        stacked: false\n                        areaStyle:\n                            opacity: 0.1\n                        lineStyle:\n                            width: 1.5\n                        smooth: false    \n                        height: 400\n\n\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 9  \n                  widgets:\n                    \n                    - markdown:\n                        content: >\n                            ## Content Analisys\n \n                            \n\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 8  \n                  widgets:\n                    - markdown:\n                        content: >\n                            ### Named Entities ( sample 50 messages )\n                            \n                            <style>\n                                \n                                span.entity-tag-LOCATION {\n                                    background: #FFF59D;\n                                    border: 1px solid #D84315;\n                                    padding: 0 5px;\n                                    color: #D84315;\n                                    font-weight: bold;\n                                                margin: 0 3px;\n\n                                }\n                                \n                                span.entity-tag-LOC {\n                                    background: #FFF59D;\n                                    border: 1px solid #D84315;\n                                    padding: 0 5px;\n                                    color: #D84315;\n                                    font-weight: bold;\n                                                margin: 0 3px;\n\n                                }\n                                \n                                span.entity-tag-PERSON {\n                                        background: #E6EE9C;\n                                        border: 1px solid #00796B;\n                                        padding: 0 5px;\n                                        color: #00796B;\n                                        font-weight: bold;\n                                                margin: 0 3px;\n\n                                }\n                                \n                                span.entity-tag-PERS {\n                                        background: #E6EE9C;\n                                        border: 1px solid #00796B;\n                                        padding: 0 5px;\n                                        color: #00796B;\n                                        font-weight: bold;\n                                                margin: 0 3px;\n\n                                }\n                                \n                                span.entity-tag-ORGANIZATION {\n                                            background: #FFEBEE;\n                                            border: 1px solid #B71C1C;\n                                            padding: 0 5px;\n                                            color: #B71C1C;\n                                            font-weight: bold;\n                                                margin: 0 3px;\n\n                                }\n                                \n                                span.entity-tag-ORG {\n                                            background: #FFEBEE;\n                                            border: 1px solid #B71C1C;\n                                            padding: 0 5px;\n                                            color: #B71C1C;\n                                            font-weight: bold;\n                                                margin: 0 3px;\n\n                                }\n                                \n                                span.entity-tag-MISC {\n                                                background: #ECEFF1;\n                                                border: 1px solid #263238;\n                                                padding: 0 5px;\n                                                color: #263238;\n                                                font-weight: bold;\n                                                margin: 0 3px;\n                                }\n                                \n                                \n                            </style>\n\n                    - table:\n                        from: ne\n                        header:\n                            items:\n                                - No.\n                                - Source\n                                # - Entities\n                                - Message\n                            decoration:\n                                class: primary--text subtitle-2        \n\n                            \n              - column:\n                  width: 4\n                  widgets:\n                    \n                    - markdown:\n                        content: '###Languages'                \n                    \n                    - pie-chart:\n                        from: stats.language\n                        asCategory: value\n                        asValue: count\n                        height: 320\n                        radius:\n                            - 40%\n                            - 55%\n\n                    - markdown:\n                        content: '###Sentiments'                \n\n                    - pie-chart:\n                        from: stats.sentiments\n                        asCategory: value\n                        asValue: count\n                        height: 320\n                        radius:\n                            - 40%\n                            - 55%\n                   \n                    - markdown:\n                        content: '###Sentiments vs. Languages'                \n\n                    - custom-chart:\n                        from: ls_heatmap\n                        height: 380\n\n                    - markdown:\n                        content:\n                            $: title\n                        # '###Sentiments vs. Sources'                \n\n                    - custom-chart:\n                        from: ss_heatmap\n                        height: 380\n                        ",
  "name": "Source Monitoring-clone",
  "expiration": {
    "size": -1
  },
  "updatedAt": "2023-10-26T20:33:40.068Z",
  "cachedAt": {
    "$date": "2023-10-26T20:34:17.042Z"
  }
},{
  "id": "ftoj6mruvqn",
  "author": "Andrey Boldak",
  "public": true,
  "data": "\n# NEW @molfar REPORT (YAML NOTATION)\n\n- context:\n\n    - import:\n        from: nlp/stem\n        as: stem\n    \n    - value:\n        into: reportId\n        transform: ( value, ctx ) => ctx.$request.id || ctx.$request.reportId\n    \n    - value:\n        into: sourceFilter\n        transform: ( value, ctx ) => ctx.$request.sourceRegex || ''\n\n \n    - value:\n        into: currentDate\n        transform: ( value, ctx ) => moment(new Date()).format(\"MMM DD, YYYY HH:mm:ss\")\n\n    - value:\n        into: startDate\n        transform: ( value, ctx ) => ctx.$request.startDate || new Date(\"2020-01-01\").toISOString()\n\n\n    - value:\n        into: endDate\n        transform: ( value, ctx ) => ctx.$request.endDate || new Date().toISOString()\n\n    - log:\n        eval: ctx => ctx.startDate+ \" - \"+ctx.endDate \n    \n\n- query:\n    - from: messages\n\n    - custom:\n        - $match:\n            \"schedule.name\":\n                $regex:\n                    $: sourceFilter\n                    \n        - $addFields:\n            scrapedAt: \n                $cond:\n                  - $ifNull:\n                        - \"$scraper.scrapedAt\"\n                        - false \n                  - \"$scraper.scrapedAt\" \n                  - \"$scrapedAt\"\n        \n        - $match:\n            scrapedAt:\n                $gte: \n                    $: startDate\n        - $match:\n            scrapedAt:\n                $lte: \n                    $: endDate\n                    \n        - $sort:\n            \"scraper.scrapedAt\": -1\n        \n        - $limit: 50\n        \n        - $project:\n            _id: 0\n            ner: \"$ner\"\n            locale: \"$langDetector.language.locale\"\n            message: \"$scraper.message.text\"\n            source: \"$schedule.name\"\n            scrapedAt: \"$scrapedAt\"\n\n    - into: ners    \n\n\n- aggregate:\n    \n    \n    - value:\n        into: ner\n        transform: >\n            (v, ctx) => {\n                \n                let data = \n                    _.flattenDeep( \n                        ctx.ners.map( r => r.ner.map(\n                            n => ({\n                                entity: ctx.stem({text: n.entity, locale: r.locale}).join(\" \"),\n                                text: n.entity,\n                                locale: r.locale,\n                                tag: n.tag\n                            })\n                        ))\n                    )\n                \n                let entities = _.groupBy(data, d => d.entity)\n               \n                let res = _.sortBy(\n                    _.keys(entities).map( key => {\n                        let e = entities[key]\n                        return {\n                            entity: _.uniqBy(e.map(d => d.text)).join(\", \"),\n                            count: e.length\n                        }\n                    }), d => d.count\n                ).reverse()    \n                \n                let cd = res.slice(0,20).filter( d => d)\n                \n                let chart = {\n                  tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                      type: 'shadow'\n                    }\n                  },\n                  legend: {},\n                  grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                  },\n                  xAxis: {\n                    type: 'value',\n                    boundaryGap: [0, 0.01]\n                  },\n                  yAxis: {\n                    type: 'category',\n                    axisLabel:{\n                      overflow: \"break\",\n                      width: 150\n                    },\n                    data: cd.map( d => d.entity).reverse()\n                  },\n                  series: [\n                    {\n                      name: 'Top 20 Named Entities',\n                      type: 'bar',\n                      data: cd.map( d => d.count).reverse()\n                    },\n                  ]\n                }\n                \n                let table = res.map( e => ({\n                        \"Named Entity\": { html: `<div class=\"subtitle-2\" style=\"line-height: 0.9\"> ${e.entity} </div>`},\n                        Count: { html: `<div class=\"subtitle-2\" style=\"line-height: 0.9\">${ e.count } </div>`}\n   \n                }))\n                \n                \n                \n                return {\n                    table,\n                    chart\n                }\n            }\n    \n    # - log:\n    #     eval: ctx => JSON.stringify(ctx.nerTable, null, \" \")\n\n     \n\n    \n#     - value:\n#         into: msgsTable\n#         transform: > \n#             (v, ctx) => {\n#                     return ctx.msgs.map( (v, i) => ({\n#                         \"No.\": i+1,\n#                         \"Date\": { html :`<div style=\"line-height:0.9\">${moment(v.date || v.scrapedAt).format(\"MMM DD, YYYY HH:mm:ss\")}`},\n#                         \"Source\": v.source,\n#                         \"Message\": {\n#                             html: `\n#                                 <div class=\"subtitle-2 font-weight-normal py-1\" style=\"line-height:1.4\">\n#                                     ${v.message}\n#                                 </div>\n#                             `\n#                         }\n#                     }))\n#                 }\n\n#     - log:\n#         eval: ctx => JSON.stringify(ctx.msgsTable, null, \" \")\n\n- publish:\n\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 10  \n                  widgets:\n                    \n                    - markdown:\n                        content: >\n                            <div class=\"d-flex align-center pb-1\" style=\"border-bottom: 1px solid #27752a\">\n                                <img src=\"./img/icons/molfar.png\" style=\"width:36px\"> \n                                <div class=\"subtitle-2 success--text px-2 pt-1\" style=\"line-height:0.8\">\n                                    @molfar\n                                    <br/> \n                                    <span class=\"caption font-weight-light\">Data Intelligence</span>\n                                </div>\n                                <div class=\"spacer\"></div>\n                                <div class=\"subtitle-2 success--text\"># ${reportId}</div>\n                            </div>\n                            \n                            \n                            # Lastest Named Entities\n                            \n                            Reported at ***${currentDate}***\n                            \n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 4\n                  widgets:\n                    \n                    - table:\n                        from: ner.table\n                        header:\n                            items:\n                                - Named Entity\n                                - Count\n                            decoration:\n                                class: primary--text subtitle-2        \n\n              - column:\n                  width: 6\n                  widgets:\n                  \n                    - custom-chart:\n                        from: ner.chart\n                        height: 650\n                            \n        ",
  "name": "STEMS",
  "expiration": {
    "size": -1
  },
  "updatedAt": "2023-10-30T11:48:44.605Z",
  "cachedAt": {
    "$date": "2023-11-09T14:33:20.852Z"
  }
},{
  "id": "5u8hutyzrq",
  "author": "Andrey Boldak",
  "public": true,
  "data": "\n# NEW @molfar REPORT (YAML NOTATION)\n\n- context:\n\n    - import:\n        from: cronjs-matcher\n        as: matcher\n    \n    - value:\n        into: reportId\n        transform: ( value, ctx ) => ctx.$request.id || ctx.$request.reportId\n    \n    - value:\n        into: sourceFilter\n        transform: ( value, ctx ) => ctx.$request.sourceRegex || ''\n\n \n    - value:\n        into: currentDate\n        transform: ( value, ctx ) => moment(new Date()).format(\"MMM DD, YYYY HH:mm:ss\")\n\n    - value:\n        into: startDate\n        transform: ( value, ctx ) => ctx.$request.startDate || new Date(\"2020-01-01\").toISOString()\n\n\n    - value:\n        into: endDate\n        transform: ( value, ctx ) => ctx.$request.endDate || new Date().toISOString()\n\n    - value:\n        into: currentCronDate\n        transform: ( value, ctx ) => new Date(moment(new Date()).format(\"YYYY-MM-DD\"))\n\n    - value:\n        into: endCronDate\n        transform: ( value, ctx ) => new Date(moment(new Date(ctx.currentCronDate)).add(1,\"day\").format(\"YYYY-MM-DD\"))\n\n\n    - value:\n        into: timing\n        transform: >\n            ( v, ctx ) => {\n                \n                return cronValue => {\n                    let res = ctx.matcher.getFutureMatches(cronValue, {\n                        startAt: ctx.currentCronDate.toISOString(),\n                        endAt:ctx.endCronDate.toISOString(),\n                        matchCount: 10\n                    })\n                    \n                    \n                    res = res.map( d => new Date(d))\n                    \n                    return res    \n                }\n            }\n\n \n    # - log:\n    #     eval: >\n    #         ctx => JSON.stringify(ctx.timing( \"0 */10 6,8 * * *\".split(\" \").slice(1).join(\" \") ), null, \" \")\n    \n\n- query:\n    - from: commits\n\n    - custom:\n        - $match:\n            branch: \"master\"\n      \n        - $sort:\n            createdAt: -1\n        \n        - $limit: 1\n        \n        - $lookup:\n            from: \"sources\"\n            localField: \"id\"\n            foreignField: \"commit\"\n            as: \"result\"\n\n        - $unwind:\n            path: \"$result\"\n    \n        - $replaceRoot:\n            newRoot: \"$result\"\n        \n        - $match:\n            \"schedule.cron\": \n                $exists: true\n\n        - $project:\n            _id: 0\n            source: \"$info.name\"\n            cron: \"$schedule.cron\"\n            startedAt: \"$schedule.startedAt\"\n        \n        - $match:\n            \"source\":\n                $regex:\n                    $: sourceFilter\n\n    - into: scheduleData    \n\n\n- aggregate:\n    \n\n    - value:\n        into: scheduleChart\n        transform: >\n            (v, ctx) => {\n                \n                let data = _.sortBy(\n                    ctx.scheduleData\n                        .filter( d => d.cron)\n                        .filter(d => d.cron != \"* * * * * *\")\n                        .filter( d => ! /^\\*\\ /.test(d.cron ) ) \n                        .map( d => {\n                            d.cron = d.cron.split(\" \").slice(1).join(\" \")\n                            d.timing = ctx.timing(d.cron).map(d => moment(d).format(\"HH:mm\"))\n                            return d\n                        }),\n                        d => d.timing[0]\n                )\n                \n                \n                ctx.chartHeight = 20 * (data.length + 1)\n                \n                let timeAxis = _.sortBy( \n                    _.uniqBy(\n                        _.flattenDeep(\n                            data.map( d => d.timing)\n                        )\n                    )\n                )    \n                \n                let title = data.map((d, idx) => ({\n                    \n                    textBaseline: 'bottom',\n                    top: ((idx + 0.5) * 100) / (data.length + 1) - 0 / (data.length+1)+ '%',\n                    text: `${d.source} ${d.cron}`,\n                    textStyle:{\n                      color: (d.startedAt) ? \"#43a047\" : \"#000000\",\n                      fontSize: 14,\n                      fontWeight: (d.startedAt) ? \"bold\" : \"normal\"\n                    }\n                    \n                }))\n                \n                let singleAxis = data.map((d, idx) => ({\n                    \n                    left: 340,\n                    type: 'category',\n                    boundaryGap: false,\n                    data: timeAxis,\n                    top: (idx * 100) / (data.length+1) + 5 + '%',\n                    height: 100 / (data.length+1) - 10 + '%',\n                    axisLabel: {\n                      interval: Math.round(data.length/4),\n                      show: idx == data.length-1\n                    },\n                    axisLine:{\n                      show: false, \n                    },\n                    axisTick:{\n                      show: idx == data.length-1\n                    }\n                    \n                }))\n                \n                \n                let series = data.map((d, idx) => ({\n                    \n                    singleAxisIndex: idx,\n                    color:(d.startedAt) ? \"#43a047\" :\"#546e7a\",\n                    coordinateSystem: 'singleAxis',\n                    type: 'scatter',\n                    data: d.timing.map( t => [_.findIndex(timeAxis, ta => ta == t)]),\n                    //symbol: \"rect\",\n                    symbolSize: 12\n                    \n                }))\n                \n                return {\n                  tooltip: {\n                    position: 'top'\n                  },\n                  title: title,\n                  singleAxis: singleAxis,\n                  series: series\n                }\n                \n            }\n    \n    - log:\n        eval: >\n            ctx => JSON.stringify(ctx.scheduleChart, null, \" \" ) \n\n- publish:\n\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 9  \n                  widgets:\n                    \n                    - markdown:\n                        content: >\n                            <div class=\"d-flex align-center pb-1\" style=\"border-bottom: 1px solid #27752a\">\n                                <img src=\"./img/icons/molfar.png\" style=\"width:36px\"> \n                                <div class=\"subtitle-2 success--text px-2 pt-1\" style=\"line-height:0.8\">\n                                    @molfar\n                                    <br/> \n                                    <span class=\"caption font-weight-light\">Data Intelligence</span>\n                                </div>\n                                <div class=\"spacer\"></div>\n                                <div class=\"subtitle-2 success--text\"># ${reportId}</div>\n                            </div>\n                            \n                            \n                            # Source Schedule\n                            \n                            Reported at ***${currentDate}***\n                            \n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 9\n                  widgets:\n                  \n                    - custom-chart:\n                        from: scheduleChart\n                        height:\n                            $: chartHeight\n                            \n        ",
  "name": "SOURCE SCHEDULE",
  "expiration": {
    "size": -1
  },
  "updatedAt": "2023-11-07T16:44:04.554Z",
  "cachedAt": {
    "$date": "2023-11-09T18:40:36.135Z"
  }
},{
  "id": "708adc6kxt2",
  "author": "Andrey Boldak",
  "public": true,
  "data": "\n# NEW ADE REPORT (YAML NOTATION)\n- context:\n    \n    - import:\n        from: nlp/highlight\n        as: highlight\n        \n    - value:\n        into: reportId\n        transform: ( value, ctx ) => ctx.$request.id || ctx.$request.reportId\n    \n    - value:\n        into: sourceFilter\n        transform: ( value, ctx ) => ctx.$request.sourceRegex || ''\n\n \n    - value:\n        into: currentDate\n        transform: ( value, ctx ) => moment(new Date()).format(\"MMM DD, YYYY HH:mm:ss\")\n\n    - value:\n        into: startDate\n        transform: ( value, ctx ) => ctx.$request.startDate || new Date(\"2020-01-01\").toISOString()\n\n\n    - value:\n        into: endDate\n        transform: ( value, ctx ) => ctx.$request.endDate || new Date().toISOString()\n\n    - value:\n        into: textSearch\n        transform: >\n            ( value, ctx ) => {\n                //ctx.$request.textSearch = \"gaza\"\n                return (ctx.$request.textSearch)\n                    ? { $match: {\n                        $text:\n                          {\n                            $search: ctx.$request.textSearch,\n                            $caseSensitive: ctx.$request.caseSensitive || false\n                          }\n                    }}\n                    : {$match:{}}\n                \n            }    \n\n    - value:\n        into: fields\n        transform: >\n            ( value, ctx ) => {\n                return (ctx.$request.textSearch)\n                    ? {\n                        score: {\n                          $meta: \"textScore\",\n                        }\n                      }\n                    : {\n                        score: 0,\n                        highlights:[]\n                      }\n            }    \n\n\n    - value:\n        into: limit\n        transform: >\n            ( value, ctx ) => {\n                return (ctx.$request.textSearch)\n                    ? {\n                        $match:{}\n                    }\n                    : {\n                        $limit: 5\n                    }\n            }    \n\n\n    # - log:\n    #     eval: ctx => ctx.startDate+ \" - \"+ctx.endDate \n    \n\n- query:\n    - from: messages\n\n    - custom:\n    \n        - $: textSearch\n        \n        - $addFields:\n            $: fields \n\n        - $match:\n            \"schedule.name\":\n                $regex:\n                    $: sourceFilter\n                    \n        - $addFields:\n            scrapedAt: \n                $cond:\n                  - $ifNull:\n                        - \"$scraper.scrapedAt\"\n                        - false \n                  - \"$scraper.scrapedAt\" \n                  - \"$scrapedAt\"\n        \n        - $match:\n            scrapedAt:\n                $gte: \n                    $: startDate\n        - $match:\n            scrapedAt:\n                $lte: \n                    $: endDate\n                    \n        - $sort:\n            \"score\": -1\n        \n        - $: limit\n        \n        - $project:\n            _id: 0\n            message: \"$scraper.message.text\"\n            score: 1\n            # highlights: 1\n            source: \"$schedule.name\"\n            date: \"$scraper.scrapedAt\"\n            scrapedAt: \"$scrapedAt\"\n\n    - into: msgs    \n\n\n- aggregate:\n    \n    # - log:\n    #     eval: ctx => JSON.stringify(ctx.msgs, null, \" \")\n\n    - value:\n        into: msgsTable\n        transform: > \n            (v, ctx) => {\n                \n                const highlight = data => data.map( d => d.texts.map( t => (t.type == \"text\") ? t.value : `<mark>${t.value}</mark>`).join(\" \")).join(\" \")\n                \n                return ctx.msgs.map( (v, i) => ({\n                    \"No.\": i+1,\n                    \"Score\": v.score.toFixed(3),\n                    \"Date\": { html :`<div style=\"line-height:0.9\">${moment(v.date || v.scrapedAt).format(\"MMM DD, YYYY HH:mm:ss\")}`},\n                    \"Source\": v.source,\n                    \"Message\": {\n                        html: `\n                            <div class=\"subtitle-2 font-weight-normal py-1\" style=\"line-height:1.4\">\n                                ${v.message}\n                            </div>\n                        `\n                    }\n                }))\n            }\n\n    # - log:\n    #     eval: ctx => JSON.stringify(ctx.msgsTable, null, \" \")\n\n- publish:\n\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 9  \n                  widgets:\n                    \n                    - markdown:\n                        content: >\n                        \n                            <style>\n                                mark {\n                                    background: #FFF9C4;\n                                    padding: 0 5px;\n                                    font-weight: bold;\n                                    color: #BF360C;\n                                }\n                            </style>\n                        \n                        \n                            <div class=\"d-flex align-center pb-1\" style=\"border-bottom: 1px solid #27752a\">\n                                <img src=\"./img/icons/molfar.png\" style=\"width:36px\"> \n                                <div class=\"subtitle-2 success--text px-2 pt-1\" style=\"line-height:0.8\">\n                                    @molfar\n                                    <br/> \n                                    <span class=\"caption font-weight-light\">Data Intelligence</span>\n                                </div>\n                                <div class=\"spacer\"></div>\n                                <div class=\"subtitle-2 success--text\"># ${reportId}</div>\n                            </div>\n                            \n                            \n                            # Message Search\n                            \n                            Reported at ***${currentDate}***\n                            \n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 9\n                  widgets:\n                    \n                    - table:\n                        from: msgsTable\n                        header:\n                            items:\n                                - No.\n                                - Score\n                                - Date\n                                - Source\n                                - Message\n                            decoration:\n                                class: primary--text subtitle-2        \n\n                            \n",
  "name": "Message Search",
  "expiration": {
    "size": -1
  },
  "updatedAt": "2023-11-04T21:50:42.246Z",
  "cachedAt": {
    "$date": "2023-11-08T09:51:33.873Z"
  }
},{
  "id": "tzbhxil90l7",
  "author": "Andrey Boldak",
  "public": true,
  "data": "\n# NEW ADE REPORT (YAML NOTATION)\n- context:\n    \n    - import:\n        from: nlp/highlight\n        as: highlight\n        \n    - value:\n        into: reportId\n        transform: ( value, ctx ) => ctx.$request.id || ctx.$request.reportId\n    \n    - value:\n        into: sourceFilter\n        transform: ( value, ctx ) => ctx.$request.sourceRegex || ''\n\n \n    - value:\n        into: currentDate\n        transform: ( value, ctx ) => moment(new Date()).format(\"MMM DD, YYYY HH:mm:ss\")\n\n    - value:\n        into: startDate\n        transform: ( value, ctx ) => ctx.$request.startDate || new Date(\"2020-01-01\").toISOString()\n\n\n    - value:\n        into: endDate\n        transform: ( value, ctx ) => ctx.$request.endDate || new Date().toISOString()\n\n    - value:\n        into: textSearch\n        transform: >\n            ( value, ctx ) => {\n                //ctx.$request.textSearch = \"gaza\"\n                return (ctx.$request.textSearch)\n                    ? {\n                        $search:\n                          {\n                            text: {\n                              query: ctx.$request.textSearch,\n                              path: \"scraper.message.text\",\n                              //fuzzy: {\n                            //    maxEdits: 2,\n                              //},\n                            },\n                            highlight: {\n                              path: \"scraper.message.text\",\n                            },\n                          }\n                    }\n                    : {$match:{}}\n                \n            }    \n\n    - value:\n        into: fields\n        transform: >\n            ( value, ctx ) => {\n                return (ctx.$request.textSearch)\n                    ? {\n                        score: {\n                          $meta: \"searchScore\",\n                        },\n                        highlights: {\n                          $meta: \"searchHighlights\",\n                        }\n                      }\n                    : {\n                        score: 0,\n                        highlights:[]\n                      }\n            }    \n\n\n    - value:\n        into: limit\n        transform: >\n            ( value, ctx ) => {\n                return (ctx.$request.textSearch)\n                    ? {\n                        $match:{}\n                    }\n                    : {\n                        $limit: 5\n                    }\n            }    \n\n\n    # - log:\n    #     eval: ctx => ctx.startDate+ \" - \"+ctx.endDate \n    \n\n- query:\n    - from: messages\n\n    - custom:\n    \n        - $: textSearch\n        \n        - $addFields:\n            $: fields \n\n        - $match:\n            \"schedule.name\":\n                $regex:\n                    $: sourceFilter\n                    \n        - $addFields:\n            scrapedAt: \n                $cond:\n                  - $ifNull:\n                        - \"$scraper.scrapedAt\"\n                        - false \n                  - \"$scraper.scrapedAt\" \n                  - \"$scrapedAt\"\n        \n        - $match:\n            scrapedAt:\n                $gte: \n                    $: startDate\n        - $match:\n            scrapedAt:\n                $lte: \n                    $: endDate\n                    \n        - $sort:\n            \"score\": -1\n        \n        - $: limit\n        \n        - $project:\n            _id: 0\n            message: \"$scraper.message.text\"\n            score: 1\n            highlights: 1\n            source: \"$schedule.name\"\n            date: \"$scraper.scrapedAt\"\n            scrapedAt: \"$scrapedAt\"\n\n    - into: msgs    \n\n\n- aggregate:\n    \n    # - log:\n    #     eval: ctx => JSON.stringify(ctx.msgs, null, \" \")\n\n    - value:\n        into: msgsTable\n        transform: > \n            (v, ctx) => {\n                \n                const highlight = data => data.map( d => d.texts.map( t => (t.type == \"text\") ? t.value : `<mark>${t.value}</mark>`).join(\" \")).join(\" \")\n                \n                return ctx.msgs.map( (v, i) => ({\n                    \"No.\": i+1,\n                    \"Score\": v.score.toFixed(3),\n                    \"Date\": { html :`<div style=\"line-height:0.9\">${moment(v.date || v.scrapedAt).format(\"MMM DD, YYYY HH:mm:ss\")}`},\n                    \"Source\": v.source,\n                    \"Message\": {\n                        html: `\n                            <div class=\"subtitle-2 font-weight-normal py-1\" style=\"line-height:1.4\">\n                                ${(v.score) ?  highlight(v.highlights) : v.message}\n                            </div>\n                        `\n                    }\n                }))\n            }\n\n    # - log:\n    #     eval: ctx => JSON.stringify(ctx.msgsTable, null, \" \")\n\n- publish:\n\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 9  \n                  widgets:\n                    \n                    - markdown:\n                        content: >\n                        \n                            <style>\n                                mark {\n                                    background: #FFF9C4;\n                                    padding: 0 5px;\n                                    font-weight: bold;\n                                    color: #BF360C;\n                                }\n                            </style>\n                        \n                        \n                            <div class=\"d-flex align-center pb-1\" style=\"border-bottom: 1px solid #27752a\">\n                                <img src=\"./img/icons/molfar.png\" style=\"width:36px\"> \n                                <div class=\"subtitle-2 success--text px-2 pt-1\" style=\"line-height:0.8\">\n                                    @molfar\n                                    <br/> \n                                    <span class=\"caption font-weight-light\">Data Intelligence</span>\n                                </div>\n                                <div class=\"spacer\"></div>\n                                <div class=\"subtitle-2 success--text\"># ${reportId}</div>\n                            </div>\n                            \n                            \n                            # Message Search\n                            \n                            Reported at ***${currentDate}***\n                            \n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 9\n                  widgets:\n                    \n                    - table:\n                        from: msgsTable\n                        header:\n                            items:\n                                - No.\n                                - Score\n                                - Date\n                                - Source\n                                - Message\n                            decoration:\n                                class: primary--text subtitle-2        \n\n                            \n",
  "name": "Message Search-clone",
  "expiration": {
    "size": -1
  },
  "updatedAt": "2023-11-04T21:44:18.182Z",
  "cachedAt": {
    "$date": "2023-11-04T21:43:45.658Z"
  }
},{
  "id": "2vr2j758d0b",
  "author": "Andrey Boldak",
  "public": true,
  "data": "\n# NEW ADE REPORT (YAML NOTATION)\n- context:\n    \n    - import:\n        from: nlp/highlight\n        as: highlight\n        \n    - value:\n        into: reportId\n        transform: ( value, ctx ) => ctx.$request.id || ctx.$request.reportId\n    \n    - value:\n        into: sourceFilter\n        transform: ( value, ctx ) => ctx.$request.sourceRegex || ''\n\n \n    - value:\n        into: currentDate\n        transform: ( value, ctx ) => moment(new Date()).format(\"MMM DD, YYYY HH:mm:ss\")\n\n    - value:\n        into: startDate\n        transform: ( value, ctx ) => ctx.$request.startDate || new Date(\"2020-01-01\").toISOString()\n\n\n    - value:\n        into: endDate\n        transform: ( value, ctx ) => ctx.$request.endDate || new Date().toISOString()\n\n    - value:\n        into: textSearchQuery\n        transform: >\n            ( value, ctx ) => ctx.$request.textSearchQuery || {$match:{}}\n            \n    - value:\n        into: fields\n        transform: >\n            ( value, ctx ) => {\n                return (ctx.$request.textSearchQuery)\n                    ? {\n                        score: {\n                          $meta: \"searchScore\",\n                        },\n                        highlights: {\n                          $meta: \"searchHighlights\",\n                        }\n                      }\n                    : {\n                        score: 0,\n                        highlights:[]\n                      }\n            }    \n\n\n    - value:\n        into: limit\n        transform: >\n            ( value, ctx ) => {\n                return (ctx.$request.textSearchQuery)\n                    ? {\n                        $match:{}\n                    }\n                    : {\n                        $limit: 5\n                    }\n            }    \n\n\n    # - log:\n    #     eval: ctx => ctx.startDate+ \" - \"+ctx.endDate \n    \n\n- query:\n    - from: messages\n\n    - custom:\n    \n        - $: textSearchQuery\n        \n        - $addFields:\n            $: fields \n\n        - $match:\n            \"schedule.name\":\n                $regex:\n                    $: sourceFilter\n                    \n        - $addFields:\n            scrapedAt: \n                $cond:\n                  - $ifNull:\n                        - \"$scraper.scrapedAt\"\n                        - false \n                  - \"$scraper.scrapedAt\" \n                  - \"$scrapedAt\"\n        \n        - $match:\n            scrapedAt:\n                $gte: \n                    $: startDate\n        - $match:\n            scrapedAt:\n                $lte: \n                    $: endDate\n                    \n        - $sort:\n            \"score\": -1\n        \n        - $: limit\n        \n        - $project:\n            _id: 0\n            message: \"$scraper.message.text\"\n            score: 1\n            highlights: 1\n            source: \"$schedule.name\"\n            date: \"$scraper.scrapedAt\"\n            scrapedAt: \"$scrapedAt\"\n\n    - into: msgs    \n\n\n- aggregate:\n    \n    # - log:\n    #     eval: ctx => JSON.stringify(ctx.msgs, null, \" \")\n\n    - value:\n        into: msgsTable\n        transform: > \n            (v, ctx) => {\n                \n                const highlight = data => data.map( d => d.texts.map( t => (t.type == \"text\") ? t.value : `<mark>${t.value}</mark>`).join(\" \")).join(\" \")\n                \n                return ctx.msgs.map( (v, i) => ({\n                    \"No.\": i+1,\n                    \"Score\": v.score.toFixed(3),\n                    \"Date\": { html :`<div style=\"line-height:0.9\">${moment(v.date || v.scrapedAt).format(\"MMM DD, YYYY HH:mm:ss\")}`},\n                    \"Source\": v.source,\n                    \"Message\": {\n                        html: `\n                            <div class=\"subtitle-2 font-weight-normal py-1\" style=\"line-height:1.4\">\n                                ${(v.score) ?  highlight(v.highlights) : v.message}\n                            </div>\n                        `\n                    }\n                }))\n            }\n\n    # - log:\n    #     eval: ctx => JSON.stringify(ctx.msgsTable, null, \" \")\n\n- publish:\n\n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 9  \n                  widgets:\n                    \n                    - markdown:\n                        content: >\n                        \n                            <style>\n                                mark {\n                                    background: #FFF9C4;\n                                    padding: 0 5px;\n                                    font-weight: bold;\n                                    color: #BF360C;\n                                }\n                            </style>\n                        \n                        \n                            <div class=\"d-flex align-center pb-1\" style=\"border-bottom: 1px solid #27752a\">\n                                <img src=\"./img/icons/molfar.png\" style=\"width:36px\"> \n                                <div class=\"subtitle-2 success--text px-2 pt-1\" style=\"line-height:0.8\">\n                                    @molfar\n                                    <br/> \n                                    <span class=\"caption font-weight-light\">Data Intelligence</span>\n                                </div>\n                                <div class=\"spacer\"></div>\n                                <div class=\"subtitle-2 success--text\"># ${reportId}</div>\n                            </div>\n                            \n                            \n                            # Message Search\n                            \n                            Reported at ***${currentDate}***\n                            \n        - section:\n            align: justify-center\n            columns:\n              - column:\n                  width: 9\n                  widgets:\n                    \n                    - table:\n                        from: msgsTable\n                        header:\n                            items:\n                                - No.\n                                - Score\n                                - Date\n                                - Source\n                                - Message\n                            decoration:\n                                class: primary--text subtitle-2        \n\n                            \n",
  "name": "TEXT SEARCH",
  "expiration": {
    "size": -1
  },
  "updatedAt": "2023-11-08T15:35:11.476Z",
  "cachedAt": {
    "$date": "2023-11-09T20:27:13.218Z"
  }
}]